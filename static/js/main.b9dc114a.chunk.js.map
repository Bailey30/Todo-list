{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TodoList","useState","input","setInput","text","setText","btnDisabled","setBtnDisabled","addHandler","storedText","push","removeHandler","index","splice","document","addEventListener","event","key","console","log","className","placeholder","type","value","onChange","e","target","btnChange","onClick","disabled","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kMA2EeA,EAzEE,WACb,MAA0BC,mBAAS,CAAC,KAApC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAWMC,EAAa,WAGf,IAAMC,EAAU,YAAOL,GACvBK,EAAWC,KAAKR,GAChBG,EAAQI,GACRN,EAAS,IACTI,GAAe,IAGbI,EAAgB,SAACC,GACnB,IAAMH,EAAU,YAAOL,GACvBK,EAAWI,OAAOD,EAAO,GACzBP,EAAQI,IAkBZ,OAZAK,SAASC,iBAAiB,WAAW,SAACC,GAChB,UAAdA,EAAMC,KAAoBX,IAC1BE,IACAL,EAAS,IACTe,QAAQC,IAAIH,IAGhBT,GAAe,MAMf,sBAAKa,UAAU,YAAf,UACI,2CAEA,sBAAKA,UAAU,YAAf,UACI,uBAAOA,UAAU,QAAQC,YAAY,4BAA4BC,KAAK,OAAOC,MAAOrB,EAAOsB,SAAU,SAAAC,GA3C7GtB,EA2CkIsB,EA3CnHC,OAAOH,OAGR,SAACP,GAEfT,GAAgBS,EAAMU,OAAOH,OAsCyGI,CAAUF,MAExI,wBAAQG,QAvBF,WAEdzB,EAAS,KAqB2BiB,UAAU,WAAtC,SAAiD,qBAAKA,UAAU,YAEhE,yBAAQQ,QAASpB,EAAYY,UAAU,MAAMS,SAAUvB,EAAvD,UAAoE,qBAAKc,UAAU,SAAa,qBAAKA,UAAU,mBAGlHhB,EAAK0B,KAAI,SAAC1B,EAAMQ,GACb,OACI,qBAAKQ,UAAU,WAAf,SACA,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,OAAd,SAAmChB,GAATQ,GAEzBR,GAAQ,wBAAQwB,QAAS,kBAAMjB,EAAcC,IAAoBQ,UAAU,SAAnE,SAA4E,qBAAKA,UAAU,UAAzCR,eCrDpEmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,SAM1BZ,M","file":"static/js/main.b9dc114a.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst TodoList = () => {\n    const [input, setInput] = useState([\"\"]) ///input bar\n    const [text, setText] = useState([])    //// text to go on list\n    const [btnDisabled, setBtnDisabled] = useState(true)\n    \n\n    const changeHandler = (event) => {\n        setInput(event.target.value)\n        //text from input box is stored by the onchange event in the value \"input\"  \n    }\n    const btnChange = (event) => {\n        //prevent item being add when text field empty\n        setBtnDisabled(!event.target.value)\n    }\n    const addHandler = () => {\n        \n        //clicking the button pushes the value of input onto the text array then rerenders the list       \n        const storedText = [...text]\n        storedText.push(input)\n        setText(storedText)\n        setInput(\"\")\n        setBtnDisabled(true)\n    }\n\n    const removeHandler = (index) => {\n        const storedText = [...text]\n        storedText.splice(index, 1)\n        setText(storedText)\n    }\n    const clearText = () => {\n        //clear input field\n        setInput(\"\")\n    }\n    document.addEventListener(\"keydown\", (event) => {\n        if (event.key === \"Enter\" && !btnDisabled) {\n            addHandler()\n            setInput(\"\")\n            console.log(event);\n\n        }\n        setBtnDisabled(true)\n    })\n\n\n\n    return (\n        <div className=\"container\">\n            <h1>ToDo List</h1>\n            {/* input box */}\n            <div className=\"inputcont\">\n                <input className=\"input\" placeholder=\"type here and press enter\" type=\"text\" value={input} onChange={e => { changeHandler(e); btnChange(e) }} />\n                {/* clear button */}\n                <button onClick={clearText} className=\"clearbtn\"><div className=\"clear\"></div></button>\n                {/* add button  */}\n                <button onClick={addHandler} className=\"add\" disabled={btnDisabled}><div className=\"vert\"></div><div className=\"plushori\"></div></button>\n            </div>\n\n            {text.map((text, index) => {\n                return (\n                    <div className=\"itemcont\">\n                    <div className=\"item\">\n                        <h2 className=\"todo\" key={index} >{text}</h2>\n                        {/* remove button  */}\n                        {text && <button onClick={() => removeHandler(index)} key={index} className=\"remove\"><div className=\"hori\"></div></button>}\n                    </div>\n                    </div>\n                )\n            })\n            }\n        </div >\n    )\n}\n\nexport default TodoList","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}